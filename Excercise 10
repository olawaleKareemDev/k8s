# Authentication
    # 1
    kubectl config view
    find the cluster name from the kubeconfig file
    export CLUSTER_NAME=kubernetes

    export APISERVER=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}')
    curl --cacert /etc/kubernetes/pki/ca.crt $APISERVER/version
    curl --cacert /etc/kubernetes/pki/ca.crt $APISERVER/v1/deployments
    The above didn't work and we need to authenticate, so let's use the first client cert

    curl --cacert /etc/kubernetes/pki/ca.crt --cert client --key key $APISERVER/apis/apps/v1/deployments above you can have the client and the key from the kubeconfig file

    # to get key and client 
    cat ~/.kube/config

    echo "<client-certificate-data_from kubeconfig>" | base64 -d > client
    echo "<client-key-data_from kubeconfig>" | base64 -d > key

    # 2
    Now using the sA Token 1.24 onwards you need to create the secret for the SA

    TOKEN=$(kubectl create token default)
    curl --cacert /etc/kubernetes/pki/ca.crt $APISERVER/apis/apps/v1 --header "Authorization: Bearer $TOKEN"
    from inside pod you can use var/run/secrets/kubernetes.io/serviceaccount/token path for the token to call the kubernetes service

    proxy

    kubectl proxy --port=8080 &s
    curl localhost:8080/apis/apps/v1/deployments